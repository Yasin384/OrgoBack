# Generated by Django 5.1.1 on 2024-12-21 04:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed Achievement', help_text='Название достижения.', max_length=100, unique=True)),
                ('description', models.TextField(default='No description provided.', help_text='Описание достижения.')),
                ('icon', models.ImageField(blank=True, help_text='Иконка достижения.', null=True, upload_to='achievements/icons/')),
                ('xp_reward', models.PositiveIntegerField(default=0, help_text='Количество XP, даваемое за достижение.')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed School', help_text='Название школы.', max_length=255, unique=True)),
                ('address', models.CharField(default='No Address Provided', help_text='Адрес школы.', max_length=500)),
                ('phone', models.CharField(blank=True, help_text='Контактный телефон школы.', max_length=20, null=True)),
                ('email', models.EmailField(default='admin@school.com', help_text='Электронная почта школы.', max_length=254, unique=True)),
                ('website', models.URLField(blank=True, help_text='Веб-сайт школы.', null=True)),
                ('established_date', models.DateField(blank=True, help_text='Дата основания школы.', null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Широта школы.', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Долгота школы.', max_digits=9, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed Subject', help_text='Название предмета.', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', 'Студент'), ('teacher', 'Учитель'), ('parent', 'Родитель')], default='student', help_text='Роль пользователя: студент, учитель или родитель.', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('school', models.ForeignKey(blank=True, help_text='Школа пользователя. Только для учителей и студентов.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='main.school')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(default='No message.', help_text='Текст уведомления.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания уведомления.')),
                ('is_read', models.BooleanField(default=False, help_text='Прочитано ли уведомление.')),
                ('user', models.ForeignKey(help_text='Пользователь, получающий уведомление.', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название класса, например, 5А.', max_length=100, unique=True)),
                ('school', models.ForeignKey(help_text='Школа, к которой принадлежит класс.', on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='main.school')),
                ('students', models.ManyToManyField(help_text='Студенты, принадлежащие к классу.', limit_choices_to={'role': 'student'}, related_name='classes', to=settings.AUTH_USER_MODEL)),
                ('teachers', models.ManyToManyField(help_text='Учителя, ведущие класс.', limit_choices_to={'role': 'teacher'}, related_name='teaching_classes', to=settings.AUTH_USER_MODEL)),
                ('subjects', models.ManyToManyField(help_text='Предметы, преподаваемые в классе.', related_name='classes', to='main.subject')),
            ],
        ),
        migrations.CreateModel(
            name='Homework',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Уникальный идентификатор домашнего задания.', primary_key=True, serialize=False)),
                ('description', models.TextField(default='No description provided.', help_text='Описание домашнего задания.')),
                ('due_date', models.DateTimeField(help_text='Срок сдачи задания.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания задания.')),
                ('school_class', models.ForeignKey(default=1, help_text='Класс, для которого задано домашнее задание.', on_delete=django.db.models.deletion.CASCADE, related_name='homeworks', to='main.schoolclass')),
                ('subject', models.ForeignKey(help_text='Предмет, к которому относится задание.', on_delete=django.db.models.deletion.CASCADE, related_name='homeworks', to='main.subject')),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.DecimalField(decimal_places=1, help_text='Оценка студента.', max_digits=3)),
                ('date', models.DateField(default=django.utils.timezone.now, help_text='Дата выставления оценки.')),
                ('comments', models.TextField(blank=True, help_text='Комментарии учителя к оценке.', null=True)),
                ('student', models.ForeignKey(help_text='Студент.', limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='grades', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(help_text='Учитель, выставивший оценку.', limit_choices_to={'role': 'teacher'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_grades', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(help_text='Предмет.', on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='main.subject')),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achieved_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время достижения.')),
                ('achievement', models.ForeignKey(help_text='Достижение.', on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='main.achievement')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('xp', models.PositiveIntegerField(default=0, help_text='Накопленные очки XP.')),
                ('level', models.PositiveIntegerField(default=1, help_text='Текущий уровень пользователя.')),
                ('achievements', models.ManyToManyField(help_text='Достижения пользователя.', related_name='users', through='main.UserAchievement', to='main.achievement')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='userachievement',
            name='user_profile',
            field=models.ForeignKey(help_text='Профиль пользователя.', on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='main.userprofile'),
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField(default=1, help_text='Место в таблице лидеров.', unique=True)),
                ('user_profile', models.OneToOneField(help_text='Профиль пользователя.', on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entry', to='main.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ParentChild',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('child', models.ForeignKey(help_text='Ребёнок.', limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='parent_relations', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(help_text='Родитель.', limit_choices_to={'role': 'parent'}, on_delete=django.db.models.deletion.CASCADE, related_name='children_relations', to=settings.AUTH_USER_MODEL)),
                ('school_class', models.ForeignKey(default=1, help_text='Класс ребенка.', on_delete=django.db.models.deletion.CASCADE, related_name='parent_child_relations', to='main.schoolclass')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('parent', 'child', 'school_class'), name='unique_parent_child_class')],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, help_text='Дата посещаемости.')),
                ('status', models.CharField(choices=[('present', 'Присутствует'), ('absent', 'Отсутствует'), ('excused', 'По уважительной причине')], default='present', help_text='Статус посещаемости.', max_length=10)),
                ('notes', models.TextField(blank=True, help_text='Примечания к посещаемости.', null=True)),
                ('student', models.ForeignKey(help_text='Студент.', limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(blank=True, help_text='Школа, к которой относится посещаемость.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='main.school')),
                ('school_class', models.ForeignKey(default=1, help_text='Класс студента.', on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='main.schoolclass')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('student', 'date'), name='unique_attendance')],
            },
        ),
        migrations.CreateModel(
            name='StudentTeacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(help_text='Тип отношений, например, наставник.', max_length=50)),
                ('established_date', models.DateField(default=django.utils.timezone.now, help_text='Дата установления отношений.')),
                ('school_class', models.ForeignKey(blank=True, help_text='Класс, в котором установлены отношения.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_teacher_relations', to='main.schoolclass')),
                ('student', models.ForeignKey(help_text='Студент.', limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='student_teacher_relations', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(help_text='Учитель.', limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_student_relations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('student', 'teacher', 'school_class'), name='unique_student_teacher_class')],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(1, 'Понедельник'), (2, 'Вторник'), (3, 'Среда'), (4, 'Четверг'), (5, 'Пятница'), (6, 'Суббота'), (7, 'Воскресенье')], default=1, help_text='День недели проведения занятия.')),
                ('start_time', models.TimeField(help_text='Время начала занятия.')),
                ('end_time', models.TimeField(help_text='Время окончания занятия.')),
                ('teacher', models.ForeignKey(help_text='Учитель, проводящий занятие.', limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to=settings.AUTH_USER_MODEL)),
                ('school_class', models.ForeignKey(blank=True, help_text='Класс, для которого расписание.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='main.schoolclass')),
                ('subject', models.ForeignKey(help_text='Предмет.', on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='main.subject')),
            ],
            options={
                'ordering': ['school_class', 'weekday', 'start_time'],
                'constraints': [models.UniqueConstraint(fields=('school_class', 'subject', 'weekday', 'start_time'), name='unique_schedule')],
            },
        ),
        migrations.CreateModel(
            name='SubmittedHomework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_file', models.FileField(help_text='Файл с выполненным заданием.', upload_to='homeworks/submissions/')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время отправки задания.')),
                ('status', models.CharField(choices=[('submitted', 'Отправлено'), ('graded', 'Оценено')], default='submitted', help_text='Статус выполнения задания.', max_length=10)),
                ('grade', models.DecimalField(blank=True, decimal_places=2, help_text='Оценка за задание.', max_digits=5, null=True)),
                ('feedback', models.TextField(blank=True, help_text='Обратная связь от учителя.', null=True)),
                ('homework', models.ForeignKey(help_text='Домашнее задание.', on_delete=django.db.models.deletion.CASCADE, related_name='submitted_homeworks', to='main.homework')),
                ('student', models.ForeignKey(help_text='Студент, отправивший задание.', limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_homeworks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('homework', 'student'), name='unique_homework_submission')],
            },
        ),
        migrations.AddConstraint(
            model_name='userachievement',
            constraint=models.UniqueConstraint(fields=('user_profile', 'achievement'), name='unique_user_achievement'),
        ),
    ]
